Problem:
        https://practice.geeksforgeeks.org/problems/kth-smallest-element/0

Solution:

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	
	static void mergeFunc(int arr[], int lb, int mid, int ub){
	    int n1 = mid + 1 - lb;
	    int n2 = ub - mid;
	    int arrL[] = new int[n1];
	    int arrR[] = new int[n2];
	    
	    for(int i=0; i<n1; i++)
	        arrL[i] = arr[lb + i];
	   
	    for(int i=0; i<n2; i++)
	        arrR[i] = arr[mid + 1 + i];
	        
	    int i=0, j=0, k=lb;
	    
	    while(i < n1 && j < n2){
	        if(arrL[i] <= arrR[j])
	            arr[k++] = arrL[i++];
	        else
	            arr[k++] = arrR[j++];
	    }
	    
	    while(i < n1)
	        arr[k++] = arrL[i++];
	    while(j < n2)
	        arr[k++] = arrR[j++];
	    
	}
	
	static void mergeSort(int arr[], int lb, int ub){
	    if(lb < ub){
	        int mid = (lb+ub)/2;
	        mergeSort(arr, lb, mid);
	        mergeSort(arr, mid+1, ub);
	        mergeFunc(arr, lb, mid, ub);
	    }
	}
	
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		for(int i=0; i<t; i++){
		    int n = sc.nextInt();
		    int arr[] = new int[n];
		    for(int j=0; j<n; j++)
		        arr[j] = sc.nextInt();
		    int k = sc.nextInt();
		    
		    mergeSort(arr, 0, arr.length-1);
		    
		    System.out.println(arr[k-1]);
		}
	}

}
